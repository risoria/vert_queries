----------------------------------------------REPORT QUERIES-------------------------------------------------


/*Display the list of products purchased in the order with ID equal to 10250. Show the following information: 
product name (product_name), the quantity of the product ordered (quantity), the unit price (unit_price 
from the order_items table), the discount (discount), and the order_date. Order the items by product name.*/

select
    a.product_name, 
    b.quantity,
    b.unit_price,
    b.discount,
    c.order_date
from products as a
join order_items as b
on a.product_id = b.product_id
join orders as c
on b.order_id = c.order_id
where c.order_id = 10250
order by a.product_name 



/*Show the following information related to all items with order_id = 10248: the product name, 
the unit price (taken from the order_items table), the quantity, and the name of the supplier's company (as supplier_name).*/

SELECT
   p.product_name, 
   o.unit_price, 
   o.quantity,
   s.company_name as supplier_name

FROM products as p 
JOIN order_items as o 
on p.product_id = o.product_id 
JOIN suppliers as s
ON  p.supplier_id = s.supplier_id
WHERE o.order_id = 10248



/*Show the following information for each product: the product name, the company name of the product supplier (use the suppliers table), 
the category name, the unit price, and the quantity per unit.*/

SELECT
    p.product_name,
    s.company_name,
    c.category_name, 
    p.unit_price, 
    p.quantity_per_unit

FROM products as p 
JOIN suppliers as s 
    ON s.supplier_id = p.supplier_id  
JOIN categories as c 
    ON c.category_id = p.category_id
/*Count the number of employees hired in 2013. Name the result number_of_employees.*/

SELECT 
    count(e.employee_id) as number_of_employees 
FROM employees as e 
WHERE e.hire_date >= '2013-01-01' 
AND e.hire_date <= '2013-12-31'

/*Show each supplier_id alongside the company_name and the number of products they supply (as the products_count column). Use the products and suppliers tables.*/

SELECT
    s.supplier_id,
    s.company_name, 
    COUNT(p.product_id)as products_count

FROM suppliers as s 
JOIN products as p 
    ON s.supplier_id = p.supplier_id 
GROUP BY 1,2

 /*Add total price after discount to the following query
    SELECT
        SUM(unit_price * quantity) AS total_price
    FROM orders o
    JOIN order_items oi 
    ON o.order_id = oi.order_id
    WHERE o.order_id = 10250;
 */


 SELECT
  SUM(unit_price * quantity) AS total_price,
  SUM(unit_price * quantity * (1 - discount)) as total_price_after_discount
FROM orders o
JOIN order_items oi 
  ON o.order_id = oi.order_id
WHERE o.order_id = 10250;

/*We want to know the number of orders processed by each employee. Show the following columns: 
employee_id, first_name, last_name, and the number of orders processed as orders_count.*/

SELECT 
    e.employee_id,
    e.first_name,
    e.last_name,
    COUNT(o.order_id) as orders_count 
FROM employees as e 
JOIN orders as o 
    ON e.employee_id = o.employee_id 
GROUP BY 1,2,3

/*How much are the products in stock in each category worth? Show three columns: category_id, category_name, and category_total_value. 
You'll calculate the third column as the sum of unit prices multiplied by the number of units in stock for all products in the given category.*/

SELECT
    c.category_id,
    c.category_name,
    sum(p.unit_price * p.units_in_stock) as category_total_value
FROM products as p 
JOIN  categories as c 
    ON p.category_id = c.category_id 
GROUP BY 1,2

/*Count the number of orders placed by each customer. Show the customer_id, company_name, and orders_count columns.*/

SELECT 
    c.customer_id,
    c.company_name, 
    count(o.order_id) as orders_count 
FROM orders as o 
JOIN customers as c 
    ON o.customer_id = c.customer_id 
GROUP BY 1,2


/*Which customers paid the most for orders made in June 2016 or July 2016? Show two columns:

    company_name
    total_paid, calculated as the total price (after discount) paid for all orders made by a given customer in June 2016 or July 2016.

Sort the results by total_paid in descending order.*/

SELECT
    c.company_name,
    sum(oi.quantity * oi.unit_price * (1 - oi.discount)) as total_paid
FROM  customers as c 
JOIN orders as o 
    ON c.customer_id = o.customer_id
JOIN order_items as oi 
    ON oi.order_id = o.order_id
WHERE o.order_date >= '2016-06-01'
AND o.order_date < '2016-08-01'
GROUP BY o.customer_id, c.company_name
ORDER BY total_paid desc 

/*Count the number of customers with and all those without a fax number. Show two columns: all_customers_count and customers_with_fax_count.*/

SELECT
    count(*) as all_customers_count,
    count(c.fax) as customers_with_fax_count
FROM customers as c 

/*Find the total number of products provided by each supplier. Show the company_name and products_count (the number of products supplied) columns. 
Include suppliers that haven't provided any products.*/

SELECT
    s.company_name, 
    count(p.product_id) as products_count 
FROM products as p
RIGHT JOIN suppliers as s 
    ON p.supplier_id = s.supplier_id 
GROUP BY 1



/*Show the number of unique companies (as number_of_companies) that had orders shipped to Spain.*/
SELECT
    count(distinct o.customer_id) as number_of_companies 
FROM orders as o 
WHERE o.ship_country = 'Spain'



/*Find the total number of products supplied by each supplier. Show the following columns: 
supplier_id, company_name, and products_supplied_count (the number of products supplied by that company).*/

SELECT
    s.supplier_id,
    s.company_name,
    count(p.units_on_order) as products_supplied_count
FROM suppliers as s 
JOIN products as p 
    ON s.supplier_id = p.supplier_id 
GROUP BY 1,2


/*How many distinct products are there in all orders shipped to France? Name the result distinct_products.*/

SELECT 
    COUNT(DISTINCT p.product_id) as distinct_products
FROM orders as o 
JOIN order_items as oi 
    ON o.order_id = oi.order_id 
JOIN products as p 
    ON p.product_id = oi.product_id
WHERE o.ship_country = 'France'


/*Show three kinds of information about product suppliers:
    1. all_suppliers (the total number of suppliers)
    2. suppliers_region_assigned (the total number of suppliers who are assigned to a region)
    3. unique_supplier_regions (the number of unique regions suppliers are assigned to)
*/

SELECT 
    count(s.supplier_id) as all_suppliers,
    count(se.region) as suppliers_region_assigned,
    count(distinct s.region) as unique_supplier_regions 
FROM (SELECT * from suppliers WHERE region is not null) as se
RIGHT JOIN suppliers as s 
    ON se.supplier_id = s.supplier_id 

/* For each employee, compute the total order value before discount from all orders processed by this employee 
between 5 July 2016 and 31 July 2016. Show the following columns: 
first_name, last_name, and sum_orders. Sort the results by sum_orders in descending order.*/


SELECT 
    e.first_name,
    e.last_name,
    sum(oi.unit_price * oi.quantity) as sum_orders
FROM employees as e 
JOIN orders as o 
    ON e.employee_id = o.employee_id
JOIN order_items as oi
    ON o.order_id = oi.order_id 
WHERE o.order_date >= '2016-07-05' AND
      o.order_date <= '2016-07-31'
GROUP BY e.employee_id, 1,2
ORDER BY sum_orders desc 

-------------------------------------------CUSTOM CLASSIFICATIONS----------------------------------------------
/*We want to create a report measuring the level of experience each Northwind employee has with the company. 
Show the first_name, last_name, hire_date, and experience columns for each employee. 
The experience column should display the following values:

    'junior' for employees hired after Jan. 1, 2014.
    'middle' for employees hired after Jan. 1, 2013 but before Jan. 1, 2014.
    'senior' for employees hired on or before Jan. 1, 2013.*/

SELECT 
    e.first_name,
    e.last_name,
    e.hire_date,
    CASE WHEN e.hire_date > '2014-01-01' THEN 'junior'
         WHEN e.hire_date > '2013-01-01' AND e.hire_date <= '2014-01-01' THEN 'middle'
         WHEN e.hire_date < '2013-01-01' THEN 'senior'
    END AS experience 
FROM employees as e 


/*
We want to show the following basic customer information (from the customers table):
    customer_id
    company_name
    country
    language
The value of the language column will be decided by the following rules:
    'German' for companies from Germany, Switzerland, and Austria.
    'English' for companies from the UK, Canada, the USA, and Ireland.
    'Other' for all other countries.
*/

SELECT
    c.customer_id,
    c.company_name,
    c.country,
    CASE WHEN c.country in ('Germany','Switzerland','Austria') THEN 'German'
         WHEN c.country in ('UK','Canada','USA','Ireland') THEN 'English'
    ELSE 'Other'
    END AS language
FROM customers as c  

/*Let's create a report that will divide all products into vegetarian and non-vegetarian categories. 
For each product, show the following columns:
    product_name
    category_name
    diet_type:
        'Non-vegetarian' for products from the categories 'Meat/Poultry' and 'Seafood'.
        'Vegetarian' for any other category.
*/

SELECT
    p.product_name,
    c.category_name,
    CASE WHEN c.category_name in ('Meat/Poultry', 'Seafood') THEN 'Non-vegetarian'
    ELSE 'Vegetarian'
    END AS diet_type 
FROM products as p 
JOIN categories as c 
    ON p.category_id = c.category_id 


    
/*
    Create a report that shows the number of products supplied from a specific continent. Display two columns: supplier_continent and product_count. 
    The supplier_continent column should have the following values:

    'North America' for products supplied from 'USA' and 'Canada'.
    'Asia' for products from 'Japan' and 'Singapore'.
    'Other' for other countries.
*/

SELECT
    CASE WHEN s.country in ('USA','Canada') THEN 'North America'
         WHEN s.country in ('Japan','Singapore') THEN 'Asia'
    ELSE 'Other'
    END AS supplier_continent,
    count(p.product_id) as product_count

FROM suppliers as s 
JOIN products as p 
ON s.supplier_id = p.supplier_id 
GROUP BY CASE WHEN s.country in ('USA','Canada') THEN 'North America'
         WHEN s.country in ('Japan','Singapore') THEN 'Asia'
    ELSE 'Other'
    END;

    /*
    We want to create a simple report that will show the number of young and old employees at Northwind. Show two columns: age and employee_count.
    The age column has the following values:

    'young' for people born after Jan. 1, 1980.
    'old' for all other employees.
    */

    SELECT 
        CASE WHEN e.birth_date > '1980-01-01' then 'young'
        ELSE 'old'
        END AS age,
        count(e.employee_id) as employee_count
    FROM employees as e 
    GROUP BY CASE WHEN e.birth_date > '1980-01-01' THEN 'young' ELSE 'old' END;

    /*For each employee, calculate the average order value (after discount) and then show the minimum average (name the column minimal_average) 
    and the maximum average (name the column maximal_average) values. Hint: Use two CTEs. In the first CTE, select the employee_id and the 
    total price after discount for each order. In the second CTE, calculate the average order value after discount for each employee. 
    Finally, in the outer query, use the MIN() and MAX() functions.*/

    WITH order_values as (
    SELECT
        o.employee_id, 
        SUM(oi.quantity * oi.unit_price *(1-oi.discount)) as total_price
    
    FROM orders as o 
    JOIN order_items as oi 
    ON o.order_id = oi.order_id 
    GROUP BY o.order_id
    ),

    customer_averages as (
    SELECT
        b.employee_id,
        avg(b.total_price) as avg_order_cost
    FROM order_values as b 
    GROUP BY b.employee_id
    )

    SELECT
        max(av.avg_order_cost) as maximal_average,
        min(av.avg_order_cost) as minimal_average
    FROM customer_averages as av

    /* Among orders shipped to Italy, show all orders that had an above-average total value (before discount). 
    Show the order_id, order_value, and avg_order_value column. The avg_order_value column should show the same average order value for all rows.
    */

    WITH italy_expensive AS (
        SELECT
            o.order_id,
            sum(oi.unit_price * oi.quantity) as order_value
        FROM orders as o 
        JOIN order_items as oi  
        USING(order_id)
        WHERE o.ship_country = 'Italy'
        GROUP BY 1
    ),
    averagecost AS (
        SELECT
            avg(order_value) as avg_order_value
        FROM italy_expensive
    )

        SELECT  
            order_id,
            order_value,
            avg_order_value
        FROM averagecost, italy_expensive 
        WHERE order_value > avg_order_value 


/*What's the average number of orders that were processed by a single employee and shipped to the USA or Canada? Show the answer in a column named avg_order_count.*/

WITH allorders AS (
    SELECT 
        o.employee_id,
        count(o.order_id) as total_orders
    FROM orders as o 
    WHERE o.ship_country IN ('USA','Canada')
    GROUP BY 1
)

SELECT
    avg(total_orders) as avg_order_count
FROM allorders 

/*Find the average order value (after discount) for each customer. Show the customer_id and avg_discounted_price columns.*/
WITH prices AS (
    SELECT
       o.customer_id,
       sum((oi.unit_price * oi.quantity) * (1- oi.discount)) as order_val
    FROM orders as o
    JOIN order_items as oi 
    USING(order_id)
    GROUP BY 1
)

SELECT
    customer_id,
    avg(order_val) as avg_discounted_price
FROM prices 
GROUP BY 1

