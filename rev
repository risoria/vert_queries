-------------------------------REVENUE REPORTS----------------------------------


--METRICTS--
--1. total revenue to date: 
--2. total revenie in a period of time
--3. total revenue for the current year/month, etc

------------------------------------------------------------------------
------------------------------PART ONE----------------------------------
------------------------------------------------------------------------

/*For each order display order_id, order_date, the number of products ordered in this order 
(name this column product_count) and the total amount paid for that order (name this column total_amount).
To access the total_amount for each order, you should use the amount column from the orders table*/

SELECT
    o.order_id,
    o.order_date,
    count(p.product_id) product_count,
    o.amount total_amount

FROM orders as o
JOIN order_items as oi 
USING(order_id)
JOIN products as p 
USING(product_id)
GROUP BY 1,2

/*Find the total revenue to date for all beverages (i.e., products with category_id = 1). Use the amount column from order_items as total_revenue.*/

SELECT
    sum(oi.amount) as total_revenue
FROM products as p 
JOIN order_items as oi 
using(product_id)
WHERE p.category_id = 1 

/*Show each category_id and category_name alongside the total_revenue generated by all order items from that category.*/

SELECT
    p.category_id,
    c.category_name,
    sum(oi.amount) as total_revenue

FROM products as p 
JOIN order_items as oi 
USING(product_id)
JOIN categories as c 
USING(category_id)
GROUP BY 1,2

/*Find the total_revenue (the sum of all amounts) from all orders placed in 2017.*/
SELECT 
sum(o.amount) as total_revenue
FROM orders as o 
WHERE o.order_date >= '2017-01-01' AND 
      o.order_date <= '2017-12-31'

/* The fiscal year in Northwind starts on September 1. For each customer, show the total 
revenue from orders placed in the fiscal year starting September 1, 2016. 
Show three columns: customer_id, company_name, and total_revenue.Use the INTERVAL keyword.*/

--CAST('2017-03-01' AS DATE) + INTERVAL '1' month means "add one month to March 1, 2017".

SELECT
    c.customer_id,
    c.company_name,
    sum(o.amount) as total_revenue
FROM customers as c 
JOIN orders as o 
USING(customer_id)
WHERE o.order_date >= '20160901' AND 
      o.order_date < cast('2016-09-01' as date) + INTERVAL '1' year 
GROUP BY 1,2  

/* The quarter is a period of three months – the first quarter (Q1) is a period of the first three months (January, February, March), 
the second quarter (Q2) is a period of the second three months (April, May, June), etc. In the world of finance, the quarter is a 
very important time period and quarterly analyses are very common. Show the total revenue generated in the first quarter of 2018. 
Group revenue by each shipping country. Show two columns: ship_country and total_revenue */

SELECT
    o.ship_country,
    sum(o.amount) as total_revenue
FROM orders as o 
WHERE o.order_date >= '20180101' AND 
      o.order_date < cast('2018-01-01' as date) + INTERVAL '3' month
GROUP BY 1

/*In a column named current_year_start, show the beginning of the current year.*/

SELECT
    CAST(extract(year from current_timestamp) ||'-01'|| '-01' AS date) current_year_start 

/* In a column named current_year_start, show the beginning of the current year using the function DATE_TRUNC(). */

SELECT 
    DATE_TRUNC('year', current_timestamp) as current_year_start 

/*Calculate the year-to-date revenue for each customer. Show two columns: customer_id and total_revenue.*/

SELECT 
    c.customer_id,
    sum(o.amount) as total_revenue
FROM customers as c 
JOIN orders as o 
USING (customer_id)
WHERE o.order_date >= DATE_TRUNC('year', current_timestamp) 
GROUP BY 1 

/* For each employee, find their quarter-to-date revenue. Show three columns: employee_id, last_name, and total_revenue. Use a DATE_TRUNC() function. */
SELECT
    e.employee_id,
    e.last_name,
    sum(o.amount) as total_revenue
FROM employees as e 
JOIN orders as o 
USING(employee_id)
WHERE o.order_date >= DATE_TRUNC('quarter', current_timestamp)
GROUP BY 1,2

/* Show the total revenue for 2018 in a column named total_revenue. */
SELECT
    SUM(o.amount) as total_revenue
FROM orders as o 
WHERE o.order_date >= '2018-01-01' AND 
      o.order_date < cast('2018-01-01' as date) + INTERVAL '1' year 

/*For each shipping country, find the month-to-date revenue. Show two columns: ship_country and total_revenue.*/
SELECT
    o.ship_country,
    sum(o.amount) as total_revenue
FROM orders as o 
WHERE o.order_date >= DATE_TRUNC('month', current_timestamp)
GROUP BY 1 

------------------------------------------------------------------------
------------------------------PART TWO----------------------------------
------------------------------------------------------------------------
/* For each year, show the total revenue from all orders shipped to the USA. 
Show two columns: revenue_year and total_revenue_usa.Order the rows by year. */

SELECT 
    EXTRACT(year from o.order_date) as revenue_year,
    sum(o.amount) as total_revenue_usa
FROM  orders as o 
WHERE o.ship_country = 'USA'
GROUP BY 1
/* Show the total revenue from each quarter of 2017. Show two columns: quarter_in_2017 
and total_revenue. Order the rows by quarter. */

SELECT
    EXTRACT(quarter from o.order_date) as quarter_in_2017,
    sum(o.amount) as total_revenue
FROM orders as o 
WHERE EXTRACT(year from o.order_date) = 2017
GROUP BY 1
ORDER BY 1 

/* Show the total monthly revenue in each year, but only for orders processed by the employee with ID of 5.
Order the results by month. The columns names should be revenue_year, revenue_month, and total_revenue. */
SELECT
    EXTRACT(year from o.order_date) as revenue_year,
    EXTRACT(month from o.order_date) as revenue_month,
    sum(o.amount) as total_revenue
FROM orders as o 
WHERE o.employee_id = 5 
GROUP BY 1,2
ORDER BY 1,2

/* Show the total revenue generated by all orders on three aggregation levels:
    The grand total of all revenue values – total_revenue
    Annual revenue values – revenue_year
    Monthly revenue values – revenue_month
Order all rows by year and month. */

SELECT
    EXTRACT(year from o.order_date) as revenue_year,
    EXTRACT(month from o.order_date) as revenue_month,
    sum(o.amount) as total_revenue
FROM orders as o 
GROUP BY ROLLUP(1,2)

/* For each month of 2016, show the average order amount and the average order amount from the previous month. 
Show three columns: calculation_month, avg_order_amount, and previous_month_avg_order_amount.
In the first row, leave the previous month value as NULL. Order the rows by month. */

SELECT
    EXTRACT(month from o.order_date) as calculation_month,
    avg(o.amount) as avg_order_amount,
    LAG(avg(o.amount), 1) OVER(ORDER BY EXTRACT(month from o.order_date)) previous_month_avg_order_amount
FROM orders as o 
WHERE EXTRACT(year from o.order_date) = 2016
GROUP BY 1
ORDER BY 1

/* For each year, calculate the count of orders placed in the current year and the count of orders placed 
in the previous year. Show three columns: order_year, order_count, and previous_year_order_count.
In the first row, leave the previous year value as NULL. Order the rows by year. */

SELECT
    EXTRACT(year from o.order_date) as order_year,
    COUNT(o.order_id) as order_count,
    LAG(COUNT(o.order_id),1) OVER(ORDER BY EXTRACT(year from o.order_date))as previous_year_order_count
FROM orders as o 
GROUP BY 1
ORDER BY 1 

/* Show the total revenue for each quarter in each year alongside the delta (revenue change) as compared to 
the previous quarter. Show the following columns: revenue_year, revenue_quarter, total_revenue, and delta.
In the first row, leave the delta value as NULL. Order the rows by year and quarter. */

SELECT
    EXTRACT(year from o.order_date) as revenue_year,
    EXTRACT(quarter from o.order_date) as revenue_quarter,
    SUM(o.amount) as total_revenue,
    SUM(o.amount) - LAG(SUM(o.amount), 1) OVER(ORDER BY EXTRACT(YEAR FROM o.order_date), EXTRACT(quarter FROM o.order_date)) as delta 
FROM orders as o 
GROUP BY 1,2
ORDER BY 1,2

/*Calculate the total monthly revenue for each month of 2017, along with the revenue change as compared to the 
previous month. Show three columns: revenue_month, total_revenue, and delta. In the first row, leave the delta 
value as NULL. Order the rows by month.*/

SELECT
    EXTRACT(month from o.order_date) as revenue_month,
    SUM(o.amount) as total_revenue,
    SUM(o.amount) - LAG(SUM(o.amount),1) OVER (ORDER BY EXTRACT(month from o.order_date)) as delta
FROM orders as o 
WHERE EXTRACT(year from o.order_date) = 2017 
GROUP BY 1
ORDER by 1

/* The template query contains the code from the previous example. Modify it to show the revenue change as a 
percentage that's rounded to three decimal places. Here's how you can count the revenue change as a percentage:
total amount−total amount from preceding quarters/total amount⋅
Remember to round the result to three decimal places.*/

SELECT
    EXTRACT(year from o.order_date) as revenue_year,
    EXTRACT(quarter from o.order_date) as revenue_quarter,
    SUM(o.amount) as total_revenue,
    ROUND(100 * (SUM(o.amount) - LAG(SUM(o.amount),1) OVER (ORDER BY EXTRACT(year from o.order_date), EXTRACT(quarter from o.order_date))) / CAST(sum(o.amount) as decimal(10,2)), 3) as delta
    
FROM orders as o 
GROUP BY 1,2
ORDER by 1

/* For each month of 2017, calculate the total monthly revenue from orders shipped to the USA and the percentage revenue change (delta) as compared to the previous month. 
Show three columns: revenue_month, total_revenue, and delta_percentage.
In the first row, leave the delta value as NULL. Order the rows by month. Here's how you can count delta_percentage:
total amount−total amount from preceding quarters/total amount⋅
Remember to round the result to the second decimal point.*/


SELECT
    EXTRACT(month from o.order_date) as revenue_month,
    SUM(o.amount) as total_revenue,
    ROUND(100 * (SUM(o.amount) - LAG(SUM(o.amount),1) OVER(ORDER BY EXTRACT(month from o.order_date))) / CAST(SUM(o.amount) as decimal(10,2)),2) as delta_percentage

FROM orders as o
WHERE o.order_date >= '2017-01-01' AND 
      o.order_date < cast('2017-01-01' as date) + INTERVAL '1' year 
AND o.ship_country = 'USA'
GROUP BY 1
ORDER BY 1

/*For each order shipped to Germany, show three columns:
    order_id
    amount
    order_value 
    – set this value to 'high' if the order's amount is greater than $1,000. Otherwise, set it to 'low'.
*/

SELECT 
    order_id,
    amount,
    CASE WHEN o.amount > 1000 THEN 'high'
         ELSE 'low'
    END AS order_value
FROM orders as o 
WHERE o.ship_country = 'Germany'

/* Show two columns:
    sum_high_freight – The total amount generated by all orders with freight values above 100.0.
    sum_low_freight – The total amount generated by all orders with freight values equal to or less than 100.0.
*/

SELECT 
    SUM(CASE WHEN o.freight > 100.0 THEN o.amount
        end) as sum_high_freight,
    SUM(CASE WHEN o.freight <= 100.0 THEN o.amount
        end) as sum_low_freight   
FROM orders as o 

/* Show a revenue in quarters report similar to the one in the explanation. Instead of the revenue per quarter, 
show the average order amount per quarter. Order the rows by year. */

SELECT 
    EXTRACT(year from o.order_date) as year,
    AVG(CASE WHEN EXTRACT(quarter from o.order_date)= 1 THEN o.amount
             END) AS Q1,
    AVG(CASE WHEN EXTRACT(quarter from o.order_date)= 2 THEN o.amount 
             END) AS Q2,
    AVG(CASE WHEN EXTRACT(quarter from o.order_date)= 3 THEN o.amount
             END) AS Q3,
    AVG(CASE WHEN EXTRACT(quarter from o.order_date)= 4 THEN o.amount
             END) AS Q4

FROM orders as o 
GROUP BY 1
ORDER BY 1 

/* Create a "revenue in quarters" report showing the number of orders placed in each quarter of each year. 
The final report should look like this:
        year 	 Q1 	 Q2     Q3 	   Q4
        2016 	  0 	  0     70 	   82
        2017 	 92 	 93    103 	  120
        2018 	182 	 88 	 0 	    0 */

SELECT 
    EXTRACT(year from o.order_date) as year,
    COUNT(CASE WHEN EXTRACT(quarter from o.order_date)=1 THEN o.order_id 
          END) AS Q1,
    COUNT(CASE WHEN EXTRACT(quarter from o.order_date)=2 THEN o.order_id
         END) AS Q2, 
    COUNT(CASE WHEN EXTRACT(quarter from o.order_date)=3 THEN o.order_id
         END) AS Q3,
    COUNT(CASE WHEN EXTRACT(quarter from o.order_date)=4 THEN o.order_id
         END) AS Q4
FROM orders as o 
GROUP BY 1
ORDER BY 1

/* Calculate the average order value for each month of 2017. Show two columns: revenue_month and avg_order_value. Order the rows by month. */
SELECT 
    EXTRACT(month from o.order_date) as revenue_month, 
    AVG(o.amount) as avg_order_value
FROM orders as o 
WHERE EXTRACT(year from o.order_date) = 2017
GROUP BY 1
ORDER BY 1

/* For each month of 2017, calculate the total revenue and the revenue change (delta) as compared to the previous month. 
Show three columns: revenue_month, total_revenue, and delta. In the first row, leave the delta value as NULL. Order the results by month. */
SELECT 
    EXTRACT(month from o.order_date) as revenue_month,
    SUM(o.amount) as total_revenue,
    SUM(o.amount) - LAG(SUM(o.amount),1) OVER (ORDER BY EXTRACT(month from o.order_date)) as delta
FROM orders as o 
WHERE EXTRACT(year from o.order_date) = 2017
GROUP BY 1
ORDER BY 1

/* Show the count of orders shipped to the USA on three aggregation levels:
    The grand total number of orders.
    The annual number of orders.
    The quarterly number of orders.
Order all rows by year and quarter. The column names should be: year, quarter, and order_count. */
SELECT
    EXTRACT(year from o.order_date) as year,
    EXTRACT(quarter from o.order_date) as quarter,
    COUNT(o.order_id) as order_count
FROM orders as o 
WHERE O.ship_country = 'USA'
GROUP BY ROLLUP(1,2)
ORDER BY 1,2

/* For all orders shipped to Germany, create a "revenue in quarters" report showing the 
total quarterly revenue in each year. The report should look like this:
year 	      Q1 	      Q2 	      Q3 	      Q4
2016 	    0.00 	    0.00 	18975.67 	16431.48
2017 	11929.90 	42017.24 	23575.24 	39797.81
2018 	54893.32 	22664.02 	    0.00 	    0.00

Order the results by year. */

SELECT
    EXTRACT(year from o.order_date) as year,
    SUM(CASE WHEN EXTRACT(quarter from o.order_date)= 1 THEN o.amount ELSE 0
        END) AS Q1,
    SUM(CASE WHEN EXTRACT(quarter from o.order_date)= 2 THEN o.amount ELSE 0
        END) AS Q2,
    SUM(CASE WHEN EXTRACT(quarter from o.order_date)= 3 THEN o.amount ELSE 0
        END) AS Q3,
    SUM(CASE WHEN EXTRACT(quarter from o.order_date)= 4 THEN o.amount ELSE 0
        END) AS Q4
FROM orders as o 
WHERE o.ship_country = 'Germany' 
GROUP BY 1
ORDER BY 1



------------------------------------------------------------------------
------------------------------PART TWO----------------------------------
------------------------------------------------------------------------



/* For all order items from the order with the ID of 10498, show the following columns:
    product_id
    category_name
    product_name
    amount 
*/

SELECT 
    oi.product_id,
    c.category_name,
    p.product_name,
    oi.amount 
FROM order_items as oi  
JOIN products as p 
ON oi.product_id = p.product_id
JOIN categories as c 
ON p.category_id = c.category_id 
WHERE oi.order_id = 10498

/*

*/
